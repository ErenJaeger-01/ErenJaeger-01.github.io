<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ORB-SLAM学习（一）：ORB特征提取</title>
    <url>/2022/05/05/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AORB%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<h2 id="相关知识介绍">相关知识介绍</h2>
<p><a href="https://kxzhang.cn/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94/#more">图像金字塔</a></p>
<p><a href="https://kxzhang.cn/2022/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AORB%E7%89%B9%E5%BE%81%E7%82%B9/">ORB特征点</a></p>
<h2 id="绪论">绪论</h2>
<p>ORB-SLAM2中的ORB特征点提取和OpenCV有所不同。在ORB-SLAM2中进行了一系列操作让特征点均匀的分布在图像中，这样对于后面的位姿估计比较好。OpenCV直接提取的特征点可能会出现扎堆，集中等现象，这样很多特征点就没用了。下面对ORB-SLAM2中的ORB特征点提取的过程进行介绍。</p>
<h2 id="构建图像金字塔">构建图像金字塔</h2>
<ul>
<li><p>首先对图像进行扩展，这一步的目的是为了之后的高斯模糊操作。</p>
<figure>
<img src="/2022/05/05/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AORB%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/图像扩展.png" alt="图像扩充示意，这一步是把原图像（最里边的矩形）扩展到最外侧的矩形"><figcaption aria-hidden="true">图像扩充示意，这一步是把原图像（最里边的矩形）扩展到最外侧的矩形</figcaption>
</figure></li>
<li><p>进行一个循环，把每一层的图像都在上一层图像的基础上进行扩充（或者叫补边），该过程用到了OpenCV中的<em>copyMakeBorder</em>函数和<em>resize</em>函数，扩充的规则为<em>BORDER_REFLECT_101</em>，扩充的效果如下：</p></li>
</ul>
<figure>
<img src="/2022/05/05/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AORB%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/图像扩充.png" alt="左边是扩充效果，可以看出是一个类似镜像的效果"><figcaption aria-hidden="true">左边是扩充效果，可以看出是一个类似镜像的效果</figcaption>
</figure>
<h2 id="计算特征点并通过四叉树对特征点进行均匀化操作">计算特征点并通过四叉树对特征点进行均匀化操作</h2>
<p>这一步又对每一层进行了一次遍历，干了这些事：</p>
<ul>
<li>把原图像的边扩充3个像素点，这个是为了进行FAST关键点提取预留的计算半径；</li>
<li>把图像均匀划分成了一堆小格子（均匀化）；</li>
<li>对这堆小格子进行遍历，在每个小格子中调用OpenCV中的FAST函数通过yaml文件中的设置阈值进行关键点提取，如果这都没采到哪怕是一个关键点，就采用最低的阈值再采一次；</li>
<li>把采取到的关键点坐标进行转换，之前是在小方格中的坐标系，现在要通过一些偏移操作转换到原图像下的坐标系；</li>
<li>调用<em>DistributeOctTree()</em>函数对特征点进行均匀化（ORB-SLAM的精髓之一），关于四叉树均匀化特征点可以通过下面一幅图来表示；</li>
</ul>
<figure>
<img src="/2022/05/05/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AORB%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/四叉树.png" alt="四叉树均匀化特征点"><figcaption aria-hidden="true">四叉树均匀化特征点</figcaption>
</figure>
<ul>
<li>再进行一次坐标转换，这次是把提取到的关键点坐标转换为金字塔划分那一步的扩展图像的坐标；</li>
</ul>
<p>干完这些事情后，又进行了一次遍历（写到这才发现这么多遍历，难怪速度比OpenCV的库函数慢）</p>
<ul>
<li>计算特征点的方向信息，调用<em>IC_Angle()</em>函数，通过一些小操作提高了一些速度。</li>
</ul>
<h2 id="计算描述子并进行金字塔图像特征恢复">计算描述子并进行金字塔图像特征恢复</h2>
<p>这一步一上来又对每层金字塔进行了一次遍历，然后把每层金字塔的特征点个数累加存到了一个变量里，之后根据这个变量设置了描述子矩阵的容量。</p>
<p>再来一次遍历（已经麻了），这一步开始计算描述子</p>
<ul>
<li>首先对金字塔图像进行高斯模糊，因为BRIEF描述子对噪声敏感，所以要通过高斯模糊消除噪声对描述子的影响，这一步就是用到了之前的图像扩充。高斯模糊方法采用的OpenCV函数<em>GaussianBlur()</em>。</li>
<li>然后对每个关键点计算描述子，首先要根据之前计算得到的方向对坐标进行旋转，坐标对齐之后根据描述子模板进行描述子计算，保存到<em>descriptors</em>矩阵中；</li>
<li>对于除第0层的图像（也就是最底下那一层），将所有的特征点乘相应层数的缩放因子，投射到最底层图像中，这样就实现了特征点的提取。</li>
</ul>
<h2 id="通过内参矩阵对特征点进行去畸变操作">通过内参矩阵对特征点进行去畸变操作</h2>
<p>内参系数在yaml文件中都给写好了，直接调用OpenCV的库函数<em>undistortPoints()</em>进行特征点去畸变操作。</p>
<h2 id="将特征点分配到网格中">将特征点分配到网格中</h2>
<p>调用<em>AssignFeaturesToGrid()</em></p>
]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>ORB-SLAM学习（二）：地图初始化</title>
    <url>/2022/05/08/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9C%B0%E5%9B%BE%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h2 id="绪论">绪论</h2>
<p>提取完ORB特征点后，需要对地图进行初始化操作。如果是单目相机，由于图像中不包含深度信息，需要通过连续的几帧图像计算出尺度信息，构建初始的三维点云。如果是双目或RGB-D相机，本身的图像就含有深度信息，因此第一帧的时候就可以完成初始化操作。下面主要对单目相机的初始化进行分析。</p>
<h2 id="基础知识">基础知识</h2>
<p><a href="https://kxzhang.cn/2022/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A9%E9%98%B5%E5%92%8C%E6%9C%AC%E8%B4%A8%E7%9F%A9%E9%98%B5/#more">基础矩阵，本质矩阵</a></p>
<p><a href="https://kxzhang.cn/2022/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8D%95%E5%BA%94%E7%9F%A9%E9%98%B5/">单应矩阵</a></p>
<p><a href="https://kxzhang.cn/2022/05/09/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3/#more">奇异值分解</a></p>
<p><a href="https://kxzhang.cn/2022/05/09/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8D%A1%E6%96%B9%E6%A3%80%E9%AA%8C/#more">卡方检验</a></p>
<h2 id="地图初始化">地图初始化</h2>
<p>地图初始化在<em>Track()</em>函数中，首先判断<em>mstate</em>有没有初始化,如果没被初始化就根据传感器类型进入不同的初始化函数中，单目初始化函数为<em>MonocularInitialization()</em>，双目或RGB-D相机共用一个初始化函数<em>StereoInitialization()</em>。</p>
<h3 id="stereoinitialization"><em>StereoInitialization()</em></h3>
<p>首先判断单目初始器<em>mpInitializer</em>有没有被创建，没有并且这一帧图像的特征点数目超过100个，就创建<em>mpInitializer</em>，并且记录参考帧数据。</p>
<p>如果<em>mpInitializer</em>被创建了，但是这一帧的特征点数目没超过100，就删除<em>mpInitializer</em>从头再来。如果一切条件满足，就开始进行特征点匹配，这一步通过<em>SearchForInitialization()</em>函数实现，函数运行完之后<em>mvbPrevMatched</em>存储匹配好的特征点，<em>mvIniMatches</em>是个vector容器，索引值表示参考帧的关键点索引值，索引值对应的值表示当前帧的关键点索引值，通过这个保存特征点的匹配关系。</p>
<p>特征匹配之后调用<em>mpInitializer</em>对象的<em>Initialize()</em>函数进行单目初始化。</p>
<h3 id="成员变量初始化">成员变量初始化</h3>
<p>遍历一遍匹配好的特征点，把两帧之间匹配好的特征点储存在<em>mvMatches12</em>变量中，把是否匹配成功标志存入<em>mvbMatched1</em>中，成功为true，失败为false。</p>
<h3 id="ransac随机采样">RANSAC随机采样</h3>
<ul>
<li>设置随机数种子</li>
<li>进行两百次迭代，每次迭代找出随机的八个点，用于后续的八点法求单应矩阵和基础矩阵，把每次找出的特征点索引储存在<em>mvSets</em>中，之后从待搜索的范围内删除该特征点的索引，确保不会被重复采集到</li>
</ul>
<h3 id="计算基础矩阵f和单应矩阵h">计算基础矩阵F和单应矩阵H</h3>
<p>这里为了加速开了两个线程，下面分开介绍</p>
<h4 id="计算单应矩阵h">计算单应矩阵H</h4>
<p>在函数<em>FindHomography()</em>中</p>
<p>首先进行对特征点进行归一化操作，这样尺度就获得了统一，计算结果具有更高的准确性。有关归一化的操作见基础知识。接下来对之前RANSAC的两百次随机采样的结果进行循环计算。在两百次循环中，干了一下这些事情：</p>
<ul>
<li>通过<em>ComputeH21()</em>函数计算归一化后的单应矩阵，计算完成后再通过之前归一化的转换矩阵的逆矩阵缩放回真实的单应矩阵。</li>
<li>利用重投影误差对当次的RABSAC结果进行评分，计算重投影并评分调用了<em>CheckHomography()</em>函数。</li>
<li>保存评分最高的单应矩阵并退出循环返回。</li>
</ul>
<p>关于<em>CheckHomography()</em>函数：</p>
<p>初始化操作中协方差系数<em>sigma</em>设置为1.0，因为只有一层图像</p>
<p>在单应矩阵中，重投影误差定义为从当前帧图像投影到参考帧图像的特征点匹配度和从参考帧图像投影到当前帧图像的特征点匹配度，具体表现为根据所求的单应矩阵求出从图1到图2的特征点，再计算投影到图2的点和图2对应的特征点之间的距离。</p>
<p>误差计算玩后和卡方检验的阈值进行对比，如果大于阈值就舍去，小于阈值就得分累加，就这样计算两遍（图1到图2和从图2到图1），最后返回得分。</p>
<h4 id="计算基础矩阵f">计算基础矩阵F</h4>
<p>在函数<em>FindFundamental()</em>中</p>
<p>首先进行对特征点进行归一化操作，这样尺度就获得了统一，计算结果具有更高的准确性。有关归一化的操作见基础知识。接下来对之前RANSAC的两百次随机采样的结果进行循环计算。在两百次循环中，干了这些事情：</p>
<ul>
<li>通过<em>ComputeF21()</em>函数计算归一化后的单应矩阵，计算完成后再通过之前归一化的转换矩阵的逆矩阵缩放回真实的基础矩阵。</li>
<li>利用重投影误差对当次的RABSAC结果进行评分，计算重投影并评分调用了<em>CheckFundamental()</em>函数。</li>
<li>保存评分最高的基础矩阵并退出循环返回。</li>
</ul>
<p>关于<em>CheckFundamental()</em>函数：</p>
<p>初始化操作中协方差系数<em>sigma</em>设置为1.0，因为只有一层图像</p>
<p>在基础矩阵中，重投影误差定义为从当前帧图像投影到参考帧图像的特征点到极线的距离和从参考帧图像投影到当前帧图像的特征点到极线的距离，误差期望为0，到极线距离越远误差越大。</p>
<p>误差计算玩后和卡方检验的阈值进行对比，如果大于阈值就舍去，小于阈值就得分累加，就这样计算两遍（图1到图2和从图2到图1），最后返回得分。</p>
<h3 id="根据得分判断是用h还是f求解位姿">根据得分判断是用H还是F求解位姿</h3>
<p>得分计算公式：</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.738ex" xmlns="http://www.w3.org/2000/svg" width="17.127ex" height="4.862ex" role="img" focusable="false" viewbox="0 -1381 7570 2149"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(759,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mo" transform="translate(1924.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(2980.6,0)"><g data-mml-node="mrow" transform="translate(1528.2,676)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mo" transform="translate(1755.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2755.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(3400.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g></g><rect width="4349.4" height="60" x="120" y="220"/></g></g></g></svg></mjx-container></span></p>
<p>SH是单应矩阵的评分，SF是基础矩阵的评分，如果RH&gt;0.4,就从单应矩阵恢复<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="3.54ex" height="1.984ex" role="img" focusable="false" viewbox="0 -683 1564.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1203.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g></g></svg></mjx-container></span>，如果RH&lt;0.4，就从基础矩阵恢复<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="3.54ex" height="1.984ex" role="img" focusable="false" viewbox="0 -683 1564.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1203.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g></g></svg></mjx-container></span>。恢复<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="3.54ex" height="1.984ex" role="img" focusable="false" viewbox="0 -683 1564.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1203.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g></g></svg></mjx-container></span>的函数分别为<em>ReconstructH()</em>和<em>ReconstructF()</em>。</p>
<h4 id="reconstructh"><em>ReconstructH()</em></h4>
<p>通过单应矩阵恢复位姿矩阵，有公式</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.575ex" xmlns="http://www.w3.org/2000/svg" width="20.811ex" height="4.104ex" role="img" focusable="false" viewbox="0 -1118 9198.7 1814"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2221.6,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mo" transform="translate(3110.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3499.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mo" transform="translate(4480.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(5481,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mfrac" transform="translate(5842,0)"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(260,-686)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><rect width="800" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(6882,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="msup" transform="translate(7271,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="TeXAtom" transform="translate(974,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container></span></p>
<p>其中K表示相机内参矩阵，n表示平面法向量，令中间的部分为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewbox="0 -716 750 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g></g></g></svg></mjx-container></span>，则有</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="13.096ex" height="2.185ex" role="img" focusable="false" viewbox="0 -883.9 5788.2 965.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(2083.6,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="TeXAtom" transform="translate(974,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mi" transform="translate(4011.2,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(4899.2,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g></g></g></svg></mjx-container></span></p>
<p>这样求出矩阵<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewbox="0 -716 750 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g></g></g></svg></mjx-container></span>，对其进行奇异值分解，得到</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="11.257ex" height="2.203ex" role="img" focusable="false" viewbox="0 -891.7 4975.7 973.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2083.6,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(2850.6,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="msup" transform="translate(3566.6,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="TeXAtom" transform="translate(861.3,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g></g></svg></mjx-container></span></p>
<p>得到8组解, 对8组解进行验证，选择产生相机前方最多3d点的一组解作为最优解并计算好点的数目。关于好点数目的计算调用了<em>CheckRT()</em>函数，最终把最优解的相关变量更新</p>
<p>关于<em>CheckRT()</em>函数：</p>
<p>首先将参考帧的坐标系定为世界坐标系，然后对所有的特征点对进行遍历，遍历做了以下行为：</p>
<ul>
<li>通过<em>Triangulate()</em>函数恢复3D点，该函数是利用三角化对点的深度进行估计；</li>
<li>检查通过三角化3D生成的三维点坐标是否无穷远，如果是无穷远点就跳过；</li>
<li>检查三维点的深度，求三维点和相机光心<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.434ex" height="2.032ex" role="img" focusable="false" viewbox="0 -704 2843.8 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mn" transform="translate(796,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1199.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1644.2,0)"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mn" transform="translate(796,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></g></svg></mjx-container></span>的距离，同时根据余弦定理计算视差，如果深度小于0并且视差角过小也跳过；</li>
<li>计算三维点投影到两幅图像的重投影误差，这里直接通过针孔相机模型的公式计算，即</li>
</ul>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.784ex" xmlns="http://www.w3.org/2000/svg" width="29.201ex" height="8.699ex" role="img" focusable="false" viewbox="0 -2172.5 12906.6 3845"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"/><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"/><svg width="667" height="402" y="49" x="0" viewbox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"/></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(43.5,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(36,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(1239,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"/><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"/><svg width="667" height="402" y="49" x="0" viewbox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"/></svg></g></g><g data-mml-node="mo" transform="translate(2183.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3239.6,0)"><g data-mml-node="mn" transform="translate(331.5,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"/></g><rect width="923" height="60" x="120" y="220"/></g><g data-mml-node="mrow" transform="translate(4402.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1018.5)"/><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1028.5)"/><svg width="667" height="447" y="26.5" x="0" viewbox="0 111.7 667 447"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.114)"/></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1422.5)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(3896.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g></g><g data-mml-node="mtr" transform="translate(0,22.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(1977.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mtd" transform="translate(3925.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1422.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(4107.2,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(5484.4,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1018.5)"/><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1028.5)"/><svg width="667" height="447" y="26.5" x="0" viewbox="0 111.7 667 447"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.114)"/></svg></g></g><g data-mml-node="mrow" transform="translate(10720.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"/><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"/><svg width="667" height="402" y="49" x="0" viewbox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"/></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(44.5,0)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(64.5,0)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(1519,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"/><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"/><svg width="667" height="402" y="49" x="0" viewbox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"/></svg></g></g></g></g></svg></mjx-container></span></p>
<p>如果重投影误差太大，就跳过；</p>
<ul>
<li>累加好点（经过重重筛选幸存下来）的个数。</li>
</ul>
<p>如果好点数目大于0，就选一个较小的视差角并返回好点个数。如果没有好点就把视差角设0。</p>
<h4 id="reconstructf"><em>ReconstructF()</em></h4>
<p>通过分解本质矩阵计算得到<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="3.54ex" height="1.984ex" role="img" focusable="false" viewbox="0 -683 1564.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1203.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g></g></svg></mjx-container></span>，该操作调用函数<em>DecomposeE()</em>。根据本质矩阵分解原理会得到四组不同的解，但是只有一组是对的，所以要通过筛选进行判断。</p>
<p>通过<em>CheckRT()</em>检验得到的四组解，并选出最多好点的一组解进行判断。</p>
<p>如果好点数目优势不够明显就返回失败，如果通过考验就把相关解保存下来并指示初始化成功。</p>
<h3 id="创建初始化地图点">创建初始化地图点</h3>
<p>如果上一步初始化成功了，首先把没有三角化的匹配点删除，然后将初始化后的第一帧作为世界坐标系，最后进行下列操作：</p>
<ul>
<li>将初始关键帧的描述子转换为词袋；</li>
<li>将关键帧插入地图；</li>
<li>遍历初始化的三维点，为这些三维点添加属性（还没学到这），最后插入到地图中，初始化完成。</li>
</ul>
]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV中用到的一些函数说明</title>
    <url>/2022/05/01/OpenCV%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="取整函数">取整函数</h2>
<p>cvRound()、cvFloor()、cvCeil()函数</p>
<ul>
<li>cvRound(): 返回参数最接近的整数值，四舍五入；</li>
<li>cvFloor(): 返回不大于参数的最大整数值，即向下取整；</li>
<li>cvCeil(): 返回不小于参数的最小整数值，即向上取整；</li>
</ul>
<p>示例： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;opencv2/opencv.hpp&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace cv;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;cvRound(2.5) : &quot; &lt;&lt; cvRound(2.5) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;cvFloor(2.5) : &quot; &lt;&lt; cvFloor(2.5) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;cvCeil(2.5)  : &quot; &lt;&lt; cvCeil(2.5)  &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; &quot;cvRound(2.5) : &quot; &lt;&lt; cvRound(2.5) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;cvFloor(2.5) : &quot; &lt;&lt; cvFloor(2.5) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;cvCeil(2.5)  : &quot; &lt;&lt; cvCeil(2.5)  &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    waitKey(0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 运行结果如下</p>
<figure>
<img src="/2022/05/01/OpenCV%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E/1.png" alt="opencv"><figcaption aria-hidden="true">opencv</figcaption>
</figure>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>五一假期产生的一些感想</title>
    <url>/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p>北京的疫情又严重起来了，五一假期全都在实验室里坐着，每天除了不上课和平时基本没什么区别。最近在学习SLAM，想把学习过程中的一些想法记录下来，又不想拘泥于以前的做法，于是搭建了这个博客网站。不得不说框架真的是很方便，对于我这种对前端一无所知的人来说也能很快的搭好一个看上去还不错（个人感觉）的网站。</p>
<p>时常觉得自己还挺幸运的，因为对自己的专业，也就是自动化并不讨厌，甚至还挺喜欢，这样起码在学习的过程中不会觉得特别痛苦。大一入学的时候接触到了一些科创活动，碰到了一些很强的人，之后就顺理成章的一路走下来了。从大一寒假决定转专业到自动化，再到之后参加的各种比赛，大四考研，最后到现在的研究生，每一步好像都没有什么犹豫。本科在实验室的日子也是我在南航少数几段有声有色的时光。</p>
<p>本科做了三年的RoboMaster，这是大疆举办的一个全国性的机器人比赛，大一第一次见到这比赛的时候惊为天人，一瞬间就知道了自己想做的就是这玩意。</p>
<figure>
<img src="/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/3.jpg" alt="RoboMaster"><figcaption aria-hidden="true">RoboMaster</figcaption>
</figure>
<p>没有半点犹豫，我大一就进去拧了几个月螺丝，同时看看学长是怎么做的，说实话，那段激情燃烧的岁月还是挺值得留恋的，年轻人精力旺盛，一下子熬个几天夜不成问题，半夜的时候七八个人点个夜宵（那时候外卖还是可以直接送到楼下的），拿麦克纳姆轮搭成的半成品车架子当餐桌，凌晨三四点走在回宿舍的路上，校园里静悄悄的，连走路的脚步声都听的很清晰。</p>
<figure>
<img src="/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/1.jpg" alt="大一实验室的工作台"><figcaption aria-hidden="true">大一实验室的工作台</figcaption>
</figure>
<figure>
<img src="/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/2.jpg" alt="半夜实验室夜宵"><figcaption aria-hidden="true">半夜实验室夜宵</figcaption>
</figure>
<p>暑假的时候队伍选拔新队员，我整个暑假大部分时间都在学校，只有中间回去了几天，小小缅怀了一下高中母校。当时选拔的题目是做一个倒立摆，那个时候我开始正式的学习STM32单片机，然后发现自己真的是很菜，调个PID都要调好久，遑论之前的底层驱动配置了。暑假的最后二十天整个人进入到一种很纯粹的状态，除了吃饭睡觉洗澡其他时间全在实验室里，终于在验收前几天实现了全部功能。验收的时候我惊讶的发现同时参加选拔的人有三分之二没做出来或者放弃选拔了，其中不乏之前看起来很强的大佬，因为他们高中就接触过类似的东西，而我的高中除了做题打游戏其他的啥也没有。</p>
<figure>
<img src="/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/4.jpg" alt="倒立摆"><figcaption aria-hidden="true">倒立摆</figcaption>
</figure>
<p>做倒立摆的经历算是让我对电控真正的入了个门，同时也意识到做技术好像没有想象中的那么难，电脑也不全是用来打游戏的（误）。</p>
<p>新学期，我逐渐热衷于参加各种电子设计比赛，当时有一种冲动，想要通过做这些比赛来证明自己，现在看来做比赛有利有弊，好处是确实可以让你在比较短的时间内学到很多东西，坏处是很多东西并没有完全搞懂，浮于表面，毕竟做比赛拿来用，能解决问题就完事了。这个想法给我后面埋了很多坑，最突出的就是大四下学期出去实习画的板子前两版不能用。</p>
<p>大二一开始参加了校电赛，当时做了一个灯光遥控装置，刚一进去就拿了一等奖，这个比赛让我的自信心再一次爆炸，学习的欲望也随之更加旺盛。</p>
<figure>
<img src="/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/5.jpg" alt="校电赛"><figcaption aria-hidden="true">校电赛</figcaption>
</figure>
<p>因为这些比赛，我的大一和大二开始这段时间可谓是顺风顺水，大一学科成绩也在前10%，还有本硕连读资格，好像保研只是水到渠成的事情。当然，人生总是充满了戏剧性，校电赛结束后，我得了肺结核。</p>
<p>这场病直接毁了之前的一切。我在医院住了一个月，休学了两个月，大二上学期的课程上了一半全部退掉不让考试，堆叠到之后的学期。当医生和我说要住院一个月时我哭的梨花带雨，因为我担心这样会失去保研资格，现在想想当时的想法还挺好笑的。</p>
<p>大二下学期重新回到学校，课程负担已经因为转专业和休学，同时我又拒绝留级而增加到了一个恐怖的高度，我意识到我无论如何也不可能掌握全部的课程，同时还要做RoboMaster比赛，花一个暑假入的队不能就这么退了，所以我只认真学了在我看来有用的课，比如数电模电，比如信号与线性系统，比如计算机软硬件基础，毛概之类的课能不上就不上，这样整个学期的节奏就还在一个可以接受的范围内。最终我的综合成绩很差，顺理成章的失去了保研资格，但是我认真学了的几门课成绩都还可以，我觉得想要的知识学到就够了。</p>
<p>大二的RoboMaster我负责了一台步兵机器人的电控，这个比赛也是大二下学期做的，这一年的机器人都做得非常好，平时测试各种移动，自瞄都很稳，但是最后比赛的时候超级电容出了问题，这是整个队伍都疏忽的一点，挺可惜，但是也没有办法，只能认了。</p>
<figure>
<img src="/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/9.jpg" alt="步兵机器人"><figcaption aria-hidden="true">步兵机器人</figcaption>
</figure>
<figure>
<img src="/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/10.jpg" alt="战队合影"><figcaption aria-hidden="true">战队合影</figcaption>
</figure>
<p>可能生病只是一个开始，回来后我做的所有事情好像没有一件是成功的。大二暑假全国电赛寄了，本来想靠这个说不定能保研，大三做智能车也寄了，本来想靠这个说不定也能保研。每次校内赛选拔成绩都很好，比如校电赛和智能车的校内赛，智能车校内赛还拿了特等奖，最终比赛都因为莫名其妙的原因出了岔子。智能车另一个组的人拿了我校赛的代码，最后拿了国三。就这样磕磕绊绊过完了整个大三，八月份的时候决定考研。</p>
<figure>
<img src="/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/11.jpg" alt="智能车"><figcaption aria-hidden="true">智能车</figcaption>
</figure>
<p>考研那段时间仿佛又找回了从前当小镇做题家的日子，本科做的最后一件算是大一点的事没有出岔子，我如愿以偿来到了北航，然后意识到以前做的东西实验室基本上都不做（大悲），不过学新东西的感觉很好，未来的路也算是明了，起码自己想做什么方向还是有数的，这个程度我已经觉得算是满意了。</p>
<p>假期最后一天的晚上胡思乱想，翻来覆去睡不着，眼睛瞪得跟铜铃一样，脑子里就在回想这些东西。如果我因为从前的无法无天，不思进取要受到惩罚的话，那么我本科已经为此付出了相应的代价。研究生三年说不定就是学生生涯的结束了，希望这三年（只剩下两年多一点了）能够成长到想要的高度。</p>
<p>继续加油。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>数学基础（一）：奇异值分解</title>
    <url>/2022/05/09/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="奇异值分解svd">奇异值分解SVD</h3>
<p>SVD分解定义</p>
<p><span class="math display">\[
   A=U\sum{}V^T
\]</span></p>
<p>其中，A是<span class="math inline">\(m\times n\)</span>的矩阵，根据奇异值分解后，U是<span class="math inline">\(m\times m\)</span>的矩阵，<span class="math inline">\(\sum{}\)</span>是一个<span class="math inline">\(m\times n\)</span>的矩阵，除主对角线上的元素以外全部为0，主对角线上的每个元素都称为奇异值，V是一个<span class="math inline">\(n\times n\)</span>的矩阵，U和V都是酉矩阵，即满足</p>
<p><span class="math display">\[
U^TU=I,V^TV=I
\]</span></p>
<p>可以用下图表示奇异值分解：</p>
<figure>
<img src="/2022/05/09/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3/奇异值分解.png" alt="奇异值分解"><figcaption aria-hidden="true">奇异值分解</figcaption>
</figure>
<p>对于奇异值,它跟我们特征分解中的特征值类似，在奇异值矩阵中也是按照从大到小排列，而且奇异值的减少特别的快，在很多情况下，前10%甚至1%的奇异值的和就占了全部的奇异值之和的99%以上的比例。 也就是说，我们也可以用最大的k个的奇异值和对应的左右奇异向量来近似描述矩阵。也就是说：</p>
<p><span class="math display">\[
   A_{m\times n}=U_{m\times n}\sum{}_{m\times n}V^T_{n\times n}\approx U_{m\times k}\sum{}_{k\times k}V^T_{k\times n}
\]</span></p>
<p>其中k比n小很多，也就是一个大矩阵A可以用三个小矩阵<span class="math inline">\(U_{m\times k},\sum{}_{k\times k},V^T_{k\times n}\)</span>来表示。</p>
<p>SVD求解最小二乘问题：</p>
<p><span class="math display">\[
   min\begin{Vmatrix}
      Ax-b
   \end{Vmatrix}^2,A\in R^{m\times n},x\in R^{n},b\in R^{m}
\]</span></p>
<p>m个方程求n个未知数，有三种情况：</p>
<ul>
<li><span class="math inline">\(m=n\)</span>且A非奇异，则有唯一解（线性代数学到的）</li>
<li><span class="math inline">\(m&gt;n\)</span>，约束的个数超过未知数个数，称为超定问题</li>
<li><span class="math inline">\(m&lt;n\)</span>，约束的个数小于未知数个数，称为负定/欠定问题</li>
</ul>
<p>通常我们遇到的都是超定问题，此时是没有解的，从而转向最小二乘问题：</p>
<p><span class="math display">\[
   J(x)=min\begin{Vmatrix}
      Ax-b
   \end{Vmatrix}^2
\]</span></p>
<p>懒得敲公式了。上个链接 <a href="https://zhuanlan.zhihu.com/p/436753966">奇异值分解与最小二乘法</a></p>
<p>总结一下结论，对于<span class="math inline">\(Ax=0\)</span></p>
<p>SVD分解之后得到的V最右侧的列向量(也就是<span class="math inline">\(V^T最下方的行向量\)</span>)就是一般性齐次线性方程组<span class="math inline">\(Ax=0\)</span>的解。</p>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>数学基础（二）：卡方检验</title>
    <url>/2022/05/09/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8D%A1%E6%96%B9%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h3 id="卡方检验">卡方检验</h3>
<p>卡方检验通过一个检验统计量来比较期望结果和实际结果之间的差别，然后得出观察频数极值的发生概率。 计算统计量步骤： （期望频数总和与观察频数总和相等） * 表里填写相应的观察频数和期望频数 * 利用卡方公式计算检验统计量：</p>
<p><span class="math display">\[
   \chi^2=\sum\frac{(O-E)^2}{E}
\]</span></p>
<p>下面进行相关说明：</p>
<ul>
<li><p>O代表观察到的频数，也就是实际发生的频数。E代表期望频数。</p></li>
<li><p>检验统计量<span class="math inline">\(\chi^2\)</span>意义：O与E之间差值越小，检验统计量越小。以E为除数，令差值与期望频数成比例。</p></li>
<li><p>卡方检验的标准：如果统计量值很小，说明观察频数和期望频数之间的差别不显著，统计量越大，差别越显著。</p></li>
<li><p>自由度：自由度用于计算检验统计量的独立变量数目，查表用的</p>
<p>自由度计算：对于单行或单列，自由度=组数-限制数；对于表格类，自由度=（行数-1）*（列数-1）</p></li>
</ul>
<p>卡方分布表如下所示</p>
<figure>
<img src="/2022/05/09/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8D%A1%E6%96%B9%E6%A3%80%E9%AA%8C/卡方分布表.png" alt="卡方分布表"><figcaption aria-hidden="true">卡方分布表</figcaption>
</figure>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉系列（一）：图像金字塔</title>
    <url>/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94/</url>
    <content><![CDATA[<h2 id="图像金字塔">图像金字塔</h2>
<p>一幅图像的金字塔是一系列以金字塔形状排列，分辨率逐渐降低且源于同一张原始图的图像集合。金字塔的底部是待处理图像的高分辨率表示，而顶部是低分辨率的近似。层级越高，图像越小，分辨率越低。图像金字塔是图像中多尺度表达的一种，最初用于机器视觉和图像压缩，最主要功能用于图像分割，是一种以多分辨率来解释图像的有效但概念简单的结构。</p>
<figure>
<img src="/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94/1.jpg" alt="pyramid"><figcaption aria-hidden="true">pyramid</figcaption>
</figure>
<p>生成图像金字塔主要有两种方式： <strong>向下采样</strong>和<strong>向上采样</strong>。</p>
<ul>
<li>向下采样：将图像从最底层（即上图中的level0）转换为level1、level2...的过程，图像分辨率不断降低。</li>
<li>向上采样：将图像从最顶层（即上图中的level4）转换为level3、level2...的过程，图像分辨率不断增大。</li>
</ul>
<p>常见的金字塔一般有两类：</p>
<ul>
<li><strong>高斯金字塔</strong>: 用来向下/降采样，主要的图像金字塔；</li>
<li><strong>拉普拉斯金字塔</strong>: 用来从金字塔低层图像重建上层未采样图像，在数字图像处理中也即是预测残差，可以对图像进行最大程度的还原，配合高斯金字塔一起使用。</li>
</ul>
<p>在OpenCv中提供了对图像进行上下采样的接口：<strong>pyrUp()</strong>和<strong>pyrDown()</strong>，同时提供了一个对图像进行尺度变换的函数<strong>resize()</strong>。</p>
<p>获取金字塔一般来说包括两个步骤：</p>
<ul>
<li>对于向下采样，首先对图像进行高斯平滑，然后进行降采样（将图像尺寸行和列方向缩减一半）；</li>
<li>对于向上采样，首先对图像进行升采样（将图像尺寸行和列方向增大一倍），然后进行高斯平滑；</li>
</ul>
]]></content>
      <categories>
        <category>Computer Version</category>
      </categories>
      <tags>
        <tag>Computer Version</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉系列（三）：ORB特征点</title>
    <url>/2022/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AORB%E7%89%B9%E5%BE%81%E7%82%B9/</url>
    <content><![CDATA[<h2 id="图像的特征点">图像的特征点</h2>
<p>图像的特征点可以理解为图像中比较有代表性的点，这些点在相机视角发生少量变化后会保持不变，于是我们就可以在各个图像中找到相同的点。在SLAM的视觉里程计中，我们需要通过一帧帧连续拍摄的图像来对相机的运动进行估计，因此需要对每一帧图像中提取出特征点，通过这些点对相机的位姿估计进行讨论。</p>
<h2 id="orb特征点">ORB特征点</h2>
<p><strong>ORB特征点（Oriented FAST and Rotated BRIEF）</strong>是对<strong>FAST关键点</strong>和<strong>BRIEF特征描述子</strong>的一种结合与改进。</p>
<ul>
<li>FAST关键点是一种角点，主要检测局部像素区域灰度变化明显的地方，因为只检测亮度，所以速度非常快；</li>
<li>BRIEF是一种二进制描述子，在提取完关键点后，对每个关键点计算描述子，用来描述关键点周围像素的信息，描述子的设计原则是“ <strong>外观相似的特征应该具有相似的描述子</strong>”。</li>
</ul>
<figure>
<img src="/2022/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AORB%E7%89%B9%E5%BE%81%E7%82%B9/fast_speedtest.jpg" alt="FAST关键点"><figcaption aria-hidden="true">FAST关键点</figcaption>
</figure>
<p>虽然FAST关键点速度非常快，但是快有快的缺陷。首先，FAST关键点没有方向信息，因此当图像发生旋转之后，关键点对应的描述子会发生变化；此外，FAST关键点不具有尺度不变性，也就是说不同距离对着同一个物体拍照，远处看起来像关键点的地方，距离近了就可能不是关键点了。对于这两个问题，ORB特征点采用了如下方法进行解决。</p>
<ul>
<li>对于尺度问题，构建 <a href="https://kxzhang.cn/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94/#more">图像金字塔</a>,得到不同尺度下的不同分辨率图像，对于每一层图像提取特征点，最后再匹配到原图像，这样就实现了关键点的尺度不变性；</li>
<li>对于旋转问题，ORB特征点采用了灰度质心法计算特征点的方向，通过特征点的方向实现关键点的旋转不变性。</li>
</ul>
<h2 id="举个例子">举个例子</h2>
<p>OpenCV提取图像特征点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;opencv2/opencv.hpp&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;chrono&gt;</span><br><span class="line">using namespace cv;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define EDGE_THRESHOLD 19</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::vector&lt;cv::KeyPoint&gt; keypoints;</span><br><span class="line">    Mat descriptors;</span><br><span class="line">    cv::Ptr&lt;cv::FeatureDetector&gt; detector = cv::ORB::create();</span><br><span class="line">    cv::Ptr&lt;cv::DescriptorExtractor&gt; descriptor = cv::ORB::create();</span><br><span class="line"></span><br><span class="line">    Mat image = imread(&quot;../distorted.png&quot;, IMREAD_COLOR);</span><br><span class="line">    //-- 第一步:检测 Oriented FAST 角点位置</span><br><span class="line">    detector-&gt;detect(image, keypoints);</span><br><span class="line"></span><br><span class="line">    //-- 第二步:根据角点位置计算 BRIEF 描述子</span><br><span class="line">    descriptor-&gt;compute(image, keypoints, descriptors);</span><br><span class="line"></span><br><span class="line">    Mat outimg;</span><br><span class="line">    drawKeypoints(image, keypoints, outimg, cv::Scalar::all(-1), cv::DrawMatchesFlags::DEFAULT);</span><br><span class="line">    imshow(&quot;原图&quot;, image);</span><br><span class="line">    imshow(&quot;OpenCV函数提取的ORB特征点&quot;, outimg);</span><br><span class="line">    imwrite(&quot;OpenCV提取的ORB特征点.jpg&quot;, outimg);</span><br><span class="line">    waitKey(0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure>
<img src="/2022/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AORB%E7%89%B9%E5%BE%81%E7%82%B9/distorted.png" alt="原图"><figcaption aria-hidden="true">原图</figcaption>
</figure>
<figure>
<img src="/2022/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AORB%E7%89%B9%E5%BE%81%E7%82%B9/OpenCV提取的特征点.jpg" alt="OpenCV提取的特征点"><figcaption aria-hidden="true">OpenCV提取的特征点</figcaption>
</figure>
]]></content>
      <categories>
        <category>Computer Version</category>
      </categories>
      <tags>
        <tag>Computer Version</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉系列（二）：图像梯度</title>
    <url>/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E6%A2%AF%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="图像梯度的概念">图像梯度的概念</h2>
<p>图像梯度是指图像某像素在x和y两个方向上的变化率（与相邻像素比较），是一个二维向量，由2个分量组成X轴的变化、Y轴的变化。其中：</p>
<ul>
<li>X轴的变化是指当前像素右侧（X加1）的像素值减去当前像素左侧（X减1）的像素值；</li>
<li>Y轴的变化是当前像素下方（Y加1）的像素值减去当前像素上方（Y减1）的像素值； 计算出来这两个分量，会形成一个二维向量，该向量描述了当前像素点的梯度。对这个向量取反正切函数 <strong><em>arctan</em></strong> ，可以得到梯度的角度。</li>
</ul>
<h2 id="图像梯度的求解">图像梯度的求解</h2>
<p>图像梯度的求解过程可以用一个卷积核来实现：[-1,0,1]。</p>
<p><span class="math inline">\(\nabla{f(x,y)}=\)</span> <span class="math inline">\(\left [ \begin{matrix} g_x\\g_y \end{matrix} \right]=\)</span> <span class="math inline">\(\left [ \begin{matrix} \frac{\partial f}{\partial x}\\ \frac{\partial f}{\partial y} \end{matrix} \right]=\)</span> <span class="math inline">\(\left [ \begin{matrix} f(x+1,y)-f(x-1,y)\\f(x,y+1)-f(x,y-1) \end{matrix} \right]\)</span></p>
<figure>
<img src="/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E6%A2%AF%E5%BA%A6/2.png" alt="gradient"><figcaption aria-hidden="true">gradient</figcaption>
</figure>
<p><span class="math inline">\(\nabla{f(x,y)}=\)</span> <span class="math inline">\(\left [ \begin{matrix} f(x+1,y)-f(x-1,y)\\f(x,y+1)-f(x,y-1) \end{matrix} \right]=\)</span> <span class="math inline">\(\left [ \begin{matrix} 55-105\\90-40 \end{matrix} \right]=\)</span> <span class="math inline">\(\left [ \begin{matrix} -50\\ 50 \end{matrix} \right]\)</span></p>
<p>图像梯度的绝对值为：</p>
<p><span class="math inline">\(\sqrt{50^2+(-50)^2}=70.7107\)</span></p>
<p>图像梯度的角度为：</p>
<p><span class="math inline">\(\arctan(-50/50)=-45^\circ\)</span></p>
]]></content>
      <categories>
        <category>Computer Version</category>
      </categories>
      <tags>
        <tag>Computer Version</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉系列（五）：基础矩阵和本质矩阵</title>
    <url>/2022/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A9%E9%98%B5%E5%92%8C%E6%9C%AC%E8%B4%A8%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h3 id="对极几何">对极几何</h3>
<p>先放一张图 <img src="/2022/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A9%E9%98%B5%E5%92%8C%E6%9C%AC%E8%B4%A8%E7%9F%A9%E9%98%B5/对极几何示意图.png" alt="对极约束示意图"></p>
<p>设第一帧到第二帧的运动为<span class="math inline">\(R,t\)</span>,两个相机中心分别为<span class="math inline">\(O_1,O_2\)</span>。<span class="math inline">\(p_1\)</span>是<span class="math inline">\(I_1\)</span>中的特征点，对应到<span class="math inline">\(I_2\)</span>中的特征点为<span class="math inline">\(p_2\)</span>。下面通过一些术语来描述他们之间的几何关系。首先，连线<span class="math inline">\(\vec{O_1 p_1}\)</span>和连线<span class="math inline">\(\vec{O_2 p_2}\)</span>在三维空间中相交于<span class="math inline">\(P\)</span>，这是<span class="math inline">\(O_1,O_2,P\)</span>可以确定一个平面，称为极平面，<span class="math inline">\(O_1,O_2\)</span>连线与像平面<span class="math inline">\(I_1,I_2\)</span>的交点分别为<span class="math inline">\(e_1,e_2\)</span>，<span class="math inline">\(e_1,e_2\)</span>被称为极点，<span class="math inline">\(O_1O_2\)</span>被称为基线，我们称极平面与两个像平面<span class="math inline">\(I_1,I_2\)</span>之间的相交线<span class="math inline">\(l_1,l_2\)</span>为极线。</p>
<h3 id="基础矩阵">基础矩阵</h3>
<p>对于特征点对<span class="math inline">\(p_1,p_2\)</span>，用基础矩阵<span class="math inline">\(F_{21}\)</span>描述特征点对之间的转换关系</p>
<p><span class="math display">\[
   p_2^TF_{21}p_1=0
\]</span></p>
<p>写成矩阵形式，有</p>
<p><span class="math display">\[
    \begin{bmatrix} v_2&amp;u_2&amp;1 \end{bmatrix}
    \begin{bmatrix} f_1&amp;f_2&amp;f_3\\f_4&amp;f_5&amp;f_6\\f_7&amp;f_8&amp;f_9 \end{bmatrix}
    \begin{bmatrix} u_1\\v_1\\1 \end{bmatrix}=0 
\]</span></p>
<p>展开得到</p>
<p><span class="math display">\[
    \begin{bmatrix} u_1*u_2&amp;v_1*u_2&amp;u_2&amp;u_1*v_2&amp;v_1*v_2&amp;v_2&amp;u_1&amp;v_1&amp;1 \end{bmatrix}
    \begin{bmatrix} f_1\\f_2\\f_3\\f_4\\f_5\\f_6\\f_7\\f_8\\f_9 \end{bmatrix}=0 
\]</span></p>
<p>这样，每对点提供一个约束方程，基础矩阵共有9个元素，7个自由度，且秩为2，所以8对点提供8个约束方程就可以求解F。</p>
<h3 id="本质矩阵">本质矩阵</h3>
<p>本质矩阵E和基础矩阵F差了个相机内参矩阵，恢复位姿的时候一般通过本质矩阵恢复，这样可以屏蔽因为相机内参造成的影响。本质矩阵和基础矩阵的关系为</p>
<p><span class="math display">\[
   E=K^TFK , E=t^{\land}R
\]</span></p>
<p>从本质矩阵恢复相机位姿<span class="math inline">\(R，t\)</span></p>
<p>对E进行奇异值分解（SVD），对于任意一个E，存在两个可能的<span class="math inline">\(R，t\)</span>与其对应，又因为-E和E等价，所以对任意一个t取负号，得到的结果是一样的，因此通过本质矩阵E分解到<span class="math inline">\(R，t\)</span>时，一共存在4个可能的解。幸运的是，正确的解是唯一的，只有第一个解的空间点P在两个相机中都具有正的深度。</p>
<p><span class="math display">\[
   t_1^{\land}=UR_Z(\frac{\pi}{2})DU^T,R_1=UR^T_Z(\frac{\pi}{2})V^T
\]</span> <span class="math display">\[
   t_2^{\land}=UR_Z(-\frac{\pi}{2})DU^T,R_2=UR^T_Z(-\frac{\pi}{2})V^T
\]</span></p>
<figure>
<img src="/2022/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A9%E9%98%B5%E5%92%8C%E6%9C%AC%E8%B4%A8%E7%9F%A9%E9%98%B5/本质矩阵分解1.jpg" alt="本质矩阵分解得到的四组解"><figcaption aria-hidden="true">本质矩阵分解得到的四组解</figcaption>
</figure>
<h3 id="三角测量三角化">三角测量（三角化）</h3>
<p>已知一对匹配好的特征点<span class="math inline">\(x_1,x_2\)</span>，投影矩阵<span class="math inline">\(P_1,P_2\)</span>分别将同一个空间点X投影到两幅图中的<span class="math inline">\(x_1,x_2\)</span>。</p>
<p>描述为：</p>
<p><span class="math display">\[
   x_1=\lambda P_1X
\]</span> <span class="math display">\[
   x_2=\lambda P_2X
\]</span></p>
<p>对于每一个表达式可以用通用方程来描述： <span class="math display">\[
    \begin{bmatrix} x\\y\\1 \end{bmatrix}=\lambda
    \begin{bmatrix} p_1&amp;p_2&amp;p_3&amp;p_4\\p_5&amp;p_6&amp;p_7&amp;p_8\\p_9&amp;p_10&amp;p_11&amp;p_12 \end{bmatrix}
    \begin{bmatrix} X\\Y\\Z\\1 \end{bmatrix} 
\]</span></p>
<p>简记为 <span class="math display">\[
    \begin{bmatrix} x\\y\\1 \end{bmatrix}=\lambda
    \begin{bmatrix} -&amp;P_0&amp;-\\-&amp;P_1&amp;-\\-&amp;P_2&amp;-\end{bmatrix}
    \begin{bmatrix} X\\Y\\Z\\1 \end{bmatrix} 
\]</span></p>
<p>两边叉乘x，有 <span class="math display">\[
    \begin{bmatrix} 0&amp;-1&amp;y\\1&amp;0&amp;-x\\-y&amp;x&amp;0 \end{bmatrix}
    \begin{bmatrix} -&amp;P_0&amp;-\\-&amp;P_1&amp;-\\-&amp;P_2&amp;-\end{bmatrix}
    \begin{bmatrix} X\\Y\\Z\\1 \end{bmatrix} =
    \begin{bmatrix} 0\\0\\0 \end{bmatrix}
\]</span></p>
<p>一个点就有</p>
<p><span class="math display">\[
    \begin{bmatrix} yP_2-P_1\\P_0-xP_2\\xP_1-yP_0 \end{bmatrix}
    X =
    \begin{bmatrix} 0\\0\\0 \end{bmatrix}
\]</span></p>
<p>秩为2，取前两行就够了</p>
<p>一对点的情况如下：</p>
<p><span class="math display">\[
    \begin{bmatrix} y_1P_{12}-P_{11}\\P_{10}-x_1P_{12}\\y_2P_{22}-P_{21}\\P_{20}-x_2P_{22} \end{bmatrix}
    X =
    \begin{bmatrix} 0\\0\\0 \end{bmatrix}
\]</span></p>
<p>变成最小二乘问题，用奇异值分解即可求解X</p>
<h3 id="各向同性归一化八点法">各向同性归一化（八点法）</h3>
<p>利用8点法求基础矩阵不稳定的一个主要原因就是原始的图像像点坐标组成的系数矩阵A不好造成的，而造成A不好的原因是像点的齐次坐标各个分量的数量级相差太大。基于这个原因，在应用8点法求基础矩阵之前，先对像点坐标进行归一化处理，即对原始的图像坐标做同向性变换，这样就可以减少噪声的干扰，大大的提高8点法的精度。</p>
<p>预先对图像坐标进行归一化有以下好处：</p>
<ul>
<li>能够提高运算结果的精度</li>
<li>利用归一化处理后的图像坐标，对任何尺度缩放和原点的选择是不变的。归一化步骤预先为图像坐标选择了一个标准的坐标系中，消除了坐标变换对结果的影响。</li>
</ul>
<p>归一化操作分两步进行，首先对每幅图像中的坐标进行平移（每幅图像的平移不同）使图像中匹配的点组成的点集的形心（Centroid）移动到原点；接着对坐标系进行缩放使得点<span class="math inline">\(p=(x,y,w)^T\)</span>中的各个分量总体上有一样的平均值，各个坐标轴的缩放相同的，最后选择合适的缩放因子使点p到原点的平均距离是<span class="math inline">\(\sqrt{2}\)</span>。 概括起来变换过程如下：</p>
<ul>
<li>对点进行平移使其形心位于原点。</li>
<li>对点进行缩放，使它们到原点的平均距离为<span class="math inline">\(\sqrt{2}\)</span></li>
<li>对两幅图像独立进行上述变换</li>
</ul>
<figure>
<img src="/2022/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A9%E9%98%B5%E5%92%8C%E6%9C%AC%E8%B4%A8%E7%9F%A9%E9%98%B5/归一化.png" alt="归一化"><figcaption aria-hidden="true">归一化</figcaption>
</figure>
<p>上图左边是原始图像的坐标，右边是归一化后的坐标，H是归一化的变换矩阵，可记为如下形式：</p>
<p><span class="math display">\[
   T=S
   \begin{bmatrix} 1&amp;0&amp;-\bar{u}\\0&amp;1&amp;-\bar{v}\\0&amp;0&amp;\frac{1}{S} \end{bmatrix}
\]</span> 其中，<span class="math inline">\(\bar{u},\bar{v}\)</span>是图像点坐标两个分量的平均值</p>
<p><span class="math display">\[
   \bar{u}=\frac{1}{N}\sum_{i=1}^N u_i,\bar{v}=\frac{1}{N}\sum_{i=1}^N v_i
\]</span></p>
<p>S表示尺度，其表达式为：</p>
<p><span class="math display">\[
   S=\frac{\sqrt{2}\cdot N}{\sqrt{\sum_{i=1}^N (u_i-\bar{u})^2+(v_i-\bar{v})^2}}
\]</span></p>
<p><strong>注：这里的公式很多网上的博客都错了，分子的N应该在根号外面，这样平均距离才是<span class="math inline">\(\sqrt{2}\)</span>,OpenCV的八点法归一化函数也是这样做的</strong></p>
<p>这样，首先对原始的图像坐标进行归一化处理，再利用8点法求解基础矩阵，最后将求得的结果解除归一化，得到基础矩阵F，总结如下：</p>
<ul>
<li>对图像1进行归一化处理，计算一个只包含平移和缩放的变换<span class="math inline">\(T_1\)</span>，将图像1中的匹配点集<span class="math inline">\(p_i^1\)</span>变换到新的点集<span class="math inline">\(\hat{p_i^1}\)</span>，新点集的形心位于原点<span class="math inline">\((0,0)^T\)</span>，并且它们到原点的平均距离是<span class="math inline">\(\sqrt{2}\)</span>。</li>
<li>对图像2，计算变换矩阵<span class="math inline">\(T_2\)</span>进行相同的归一化处理</li>
<li>使用8点法利用变换后的点集估计基础矩阵<span class="math inline">\(\hat{F}\)</span></li>
<li>建立变换<span class="math inline">\(F=T^T_2\hat{F} T_1\)</span></li>
</ul>
<p>对单应矩阵的归一化处理同理，总结如下：</p>
<ul>
<li>对图像1进行归一化处理，计算一个只包含平移和缩放的变换<span class="math inline">\(T_1\)</span>，将图像1中的匹配点集<span class="math inline">\(p_i^1\)</span>变换到新的点集<span class="math inline">\(\hat{p_i^1}\)</span>，新点集的形心位于原点<span class="math inline">\((0,0)^T\)</span>，并且它们到原点的平均距离是<span class="math inline">\(\sqrt{2}\)</span>。</li>
<li>对图像2，计算变换矩阵<span class="math inline">\(T_2\)</span>进行相同的归一化处理</li>
<li>使用8点法利用变换后的点集估计基础矩阵<span class="math inline">\(\hat{H}\)</span></li>
<li>建立变换<span class="math inline">\(H=T^{-1}_2 \hat{H}T_1\)</span></li>
</ul>
<p>ORB-SLAM2中的归一化操作与论文中的不同，是采取了一阶矩进行归一化，具体来说就是缩放因子分别为</p>
<p><span class="math display">\[
   sX=\frac{N}{\sum_{i=1}^N \begin{vmatrix}u_i-\bar{u} \end{vmatrix}},
   sY=\frac{N}{\sum_{i=1}^N \begin{vmatrix}v_i-\bar{v} \end{vmatrix}}
\]</span></p>
<p>至于为什么这样做，还没搞明白。</p>
]]></content>
      <categories>
        <category>Computer Version</category>
      </categories>
      <tags>
        <tag>Computer Version</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉系列（四）：单应矩阵</title>
    <url>/2022/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8D%95%E5%BA%94%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h3 id="单应矩阵">单应矩阵</h3>
<p>单应矩阵约束了同一3D空间点在两个像素平面上的2D坐标，本质上是射影平面上的可逆齐次线性变换。对于特征点对<span class="math inline">\(p_1,p_2\)</span>，用单应矩阵<span class="math inline">\(H21\)</span>描述特征点对之间的变换关系，有：</p>
<p><span class="math display">\[\begin{equation}
    p_2=H_{21}*p_1 \tag{1}
\end{equation}\]</span></p>
<p>其中<span class="math inline">\(H_{21}\)</span>中的“21”表示从1到2的单应矩阵，也就是指“把坐标系2中的向量变换到坐标系1中”。下称矩阵形式，有</p>
<p><span class="math display">\[
 \begin{equation} 
    \begin{bmatrix} u_2\\v_2\\1 \end{bmatrix}=
    \begin{bmatrix} h_1&amp;h_2&amp;h_3\\h_4&amp;h_5&amp;h_6\\h_7&amp;h_8&amp;h_9 \end{bmatrix}
    \begin{bmatrix} u_1\\v_1\\1 \end{bmatrix} \tag{2}
 \end{equation}
\]</span></p>
<p>两边左侧叉乘<span class="math inline">\(p_2\)</span>，则等式左侧为0，右侧向量叉乘转换为反对称矩阵，得到下式</p>
<p><span class="math display">\[
 \begin{equation} 
    \begin{bmatrix} 0&amp;-1&amp;v_2\\1&amp;0&amp;-u_2\\-v_2&amp;u_2&amp;0 \end{bmatrix}
    \begin{bmatrix} h_1&amp;h_2&amp;h_3\\h_4&amp;h_5&amp;h_6\\h_7&amp;h_8&amp;h_9 \end{bmatrix}
    \begin{bmatrix} u_1\\v_1\\1 \end{bmatrix}=0 
    \tag{3}
 \end{equation}
\]</span></p>
<p>展开计算，有</p>
<p><span class="math display">\[   u_2=(h_1*u_1+h_2*v_1+h_3)/(h_7*u_1+h_8*v_1+h_9) \]</span> <span class="math display">\[
\begin{equation}  
   v_2=(h_4*u_1+h_5*v_1+h_6)/(h_7*u_1+h_8*v_1+h_9)
   \tag{4} 
\end{equation}
\]</span></p>
<p>两边乘分母，得到</p>
<p><span class="math display">\[   h_1*u_1+h_2*v_1+h_3-(h_7*u_1*u_2+h_8*v_1*u_2+h_9*u_2)=0 \]</span> <span class="math display">\[
\begin{equation}  
   -(h_4*u_1+h_5*v_1+h_6)+(h_7*u_1*v_2+h_8*v_1*v_2+h_9*v_2)=0
   \tag{5} 
\end{equation}
\]</span></p>
<p>转化为矩阵形式，有</p>
<p><span class="math display">\[
 \begin{equation} 
    \begin{bmatrix} u_1&amp;v_1&amp;1&amp;0&amp;0&amp;0&amp;-u_1*u_2&amp;-v_1*u_2&amp;-u_2\\0&amp;0&amp;0&amp;-u_1&amp;-v_1&amp;-1&amp;u_1*v_2&amp;v_1*v_2&amp;v_2 \end{bmatrix}
    \begin{bmatrix} h_1\\h_2\\h_3\\h_4\\h_5\\h_6\\h_7\\h_8\\h_9 \end{bmatrix}=0 
    \tag{6}
 \end{equation}
\]</span></p>
<p>令第一项为<span class="math inline">\(A\)</span>,第二项为<span class="math inline">\(X\)</span>，则有</p>
<p><span class="math display">\[
 \begin{equation} 
    AX=0
    \tag{7}
 \end{equation}
\]</span></p>
<p>这样，每对特征点提供两个约束，<span class="math inline">\(H\)</span>共有9个元素，由于变换是齐次的，所以同一个单应矩阵<span class="math inline">\(H\)</span>可以相差一个非零常数因子，因此一个单应矩阵有8个自由度，理论上提供四对点形成8个约束方程就可以求解。</p>
<h3 id="通过单应矩阵恢复位姿rt">通过单应矩阵恢复位姿<span class="math inline">\(R,t\)</span></h3>
<p>从定义出发，单应矩阵通常描述处于共同平面的一些点在两张图像之间的变换关系。设图像<span class="math inline">\(I_1,I_2\)</span>有一对匹配好的特征点<span class="math inline">\(p_1,p_2\)</span>，这个特征点落在平面P上，设这个平面满足方程</p>
<p><span class="math display">\[
   n^TP+d=0
\]</span></p>
<p>整理得到</p>
<p><span class="math display">\[
   -\frac{n^TP}{d}=1
\]</span></p>
<p>又因为</p>
<p><span class="math display">\[
   s_1p_1=KP,s_2p_2=K(RP+t)
\]</span></p>
<p>有</p>
<p><span class="math display">\[
   p_2\simeq K(RP+t)\simeq K(RP+t \cdot (-\frac{n^TP}{d}))\simeq K(R-\frac{n^T}{d}P\simeq K(R-\frac{tn^T}{d})K^{-1}p_1
\]</span></p>
<p>从上面可以看出，单应矩阵<span class="math inline">\(H_{21}\)</span>就是等式右边那一坨,设那一坨是A，A就包含了<span class="math inline">\(R，t\)</span>的信息。</p>
<p>对H进行奇异值分解，会得到8组解<span class="math inline">\(R,T\)</span>，选出3D点在相机前方最多的解为最优解</p>
<p>Q：为什么是八组解？</p>
<p>A：已知约束条件</p>
<ul>
<li><span class="math inline">\(d_1\ge d_2 \ge d_3\)</span></li>
<li><span class="math inline">\(\sum_{i=1}^3x_i^2=1\)</span></li>
</ul>
<p>其中，<span class="math inline">\(d_i\)</span>是奇异值，<span class="math inline">\(x_i\)</span>是单位法向量n的坐标，所以平方和为1.</p>
<p>根据上面条件求解线性方程组，使其有非零解</p>
<p><span class="math display">\[
\left\{\begin{array}{l}
\left(d^{\prime 2}-d_{2}^{2}\right) x_{1}^{2}+\left(d^{\prime 2}-d_{1}^{2}\right) x_{2}^{2}=0 \\
\left(d^{\prime 2}-d_{3}^{2}\right) x_{2}^{2}+\left(d^{\prime 2}-d_{2}^{2}\right) x_{3}^{2}=0 \\
\left(d^{\prime 2}-d_{1}^{2}\right) x_{3}^{2}+\left(d^{\prime 2}-d_{3}^{2}\right) x_{1}^{2}=0
\end{array}\right.
\]</span></p>
<p>那么根据线性代数的知识可以知道，该线性方程组的行列式必须为0，即</p>
<p><span class="math display">\[
   (d^{&#39;2}-d_1^2)(d^{&#39;2}-d_2^2)(d^{&#39;2}-d_3^2)=0
\]</span></p>
<p>逐个分析<span class="math inline">\(d^{&#39;}\)</span>的取值</p>
<ul>
<li><p><span class="math inline">\(d^{&#39;}=\pm d_1\)</span></p>
<p>唯一解为:<span class="math inline">\(x_1=x_2=x_3=0\)</span>，不满足第二个条件</p></li>
<li><p><span class="math inline">\(d^{&#39;}=\pm d_3\)</span></p>
<p>唯一解为:<span class="math inline">\(x_1=x_2=x_3=0\)</span>，不满足第二个条件</p></li>
<li><p><span class="math inline">\(d^{&#39;}=\pm d_2且d_1 \ne d_3\)</span></p>
<p>有四组解：</p></li>
</ul>
<p><span class="math display">\[
\left\{\begin{array}{l}
x_{1}=\varepsilon_{1} \sqrt{\frac{d_{1}^{2}-d_{2}^{2}}{d_{1}^{2}-d_{3}^{2}}} \\
x_{2}=0 \\
x_{3}=\varepsilon_{3} \sqrt{\frac{d_{2}^{2}-d_{3}^{2}}{d_{1}^{1}-d_{3}^{2}}}
\end{array}\right.
\]</span></p>
<p>又，对于平移向量的公式</p>
<ul>
<li><span class="math inline">\(d^{&#39;}&gt;0\)</span></li>
</ul>
<p><span class="math display">\[
   t^{&#39;}=(d_1-d_3)\begin{pmatrix}
      x_1 \\ 0 \\ -x_3     
   \end{pmatrix}
\]</span></p>
<ul>
<li><span class="math inline">\(d^{&#39;}&lt;0\)</span></li>
</ul>
<p><span class="math display">\[
   t^{&#39;}=(d_1+d_3)\begin{pmatrix}
      x_1 \\ 0 \\ x_3     
   \end{pmatrix}
\]</span></p>
<p>可以看出，平移向量和每组解都有联系，因此就成了2*4=8组解，选出3D点在相机前方最多的解为最优解。</p>
]]></content>
      <categories>
        <category>Computer Version</category>
      </categories>
      <tags>
        <tag>Computer Version</tag>
      </tags>
  </entry>
  <entry>
    <title>ORB-SLAM学习（三）：地图点、关键帧和图结构</title>
    <url>/2022/05/13/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9C%B0%E5%9B%BE%E7%82%B9%E3%80%81%E5%85%B3%E9%94%AE%E5%B8%A7%E5%92%8C%E5%9B%BE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="地图点">地图点</h2>
<p>地图点就是真实世界中的点，来自真实世界的三维物体，有唯一的ID，不同图像帧里面的特征点可能对应三维空间中的同一个地图点。</p>
<h3 id="地图点生成">地图点生成</h3>
<p>地图点生成在ORB-SLAM2中主要存在于下面几个地方：</p>
<ul>
<li>单目初始化时前两帧会生成一部分地图点，双目初始化通过左右目匹配第一帧就可以生成地图点，RGB-D相机通过测量深度也可以在第一帧生成部分地图点；</li>
<li>局部建图线程里面，共视关键帧之间通过<em>LocalMapping::CreateNewMapPoints()</em>函数生成地图点；</li>
<li>跟踪线程里面，<em>Tracking::UpdateLastFrame()</em>和<em>Tracking::CreateNewKeyFrame()</em>函数中为双目和RGB-D相机生成新的<strong>临时</strong>地图点，单目相机不生成地图点。</li>
</ul>
<h3 id="计算地图点最具代表性的描述子">计算地图点最具代表性的描述子</h3>
<p>由于一个地图点会被多个相机图像观测到，因此在插入关键帧后，需要判断是否更新当前点的描述子。</p>
<figure>
<img src="/2022/05/13/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9C%B0%E5%9B%BE%E7%82%B9%E3%80%81%E5%85%B3%E9%94%AE%E5%B8%A7%E5%92%8C%E5%9B%BE%E7%BB%93%E6%9E%84/代表描述子.png" alt="找出合适的描述子描述该地图点"><figcaption aria-hidden="true">找出合适的描述子描述该地图点</figcaption>
</figure>
<p>那么代表性描述子如何找出来呢？具体的操作为首先获得当前点的所有描述子，然后计算描述子之间的两两距离。在ORB-SLAM2中，最好的描述子与其他的描述子之间应该具有最小的距离中值。</p>
<figure>
<img src="/2022/05/13/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9C%B0%E5%9B%BE%E7%82%B9%E3%80%81%E5%85%B3%E9%94%AE%E5%B8%A7%E5%92%8C%E5%9B%BE%E7%BB%93%E6%9E%84/距离中值.png" alt="距离中值"><figcaption aria-hidden="true">距离中值</figcaption>
</figure>
<h4 id="计算描述子距离">计算描述子距离</h4>
<p>在函数<em>ORBmatcher::DescriptorDistance()</em>中，通过汉明距离进行计算</p>
<p><strong>汉明距离</strong>：汉明距离是一个概念，它表示两个（相同长度）字符串对应位置的不同字符的数量，我们以d（x,y）表示两个字x,y之间的汉明距离。对两个字符串进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。</p>
<p>举个例子，1011101和1001001之间的汉明距离是2，因为第三位和第六位不同。</p>
<p>由于BRIEF描述子是一堆二进制串，所以通过汉明距离计算非常方便</p>
<p>ORB-SLAM2中计算BRIEF描述子汉明距离的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//pa,pb是两BRIEF描述子，每个描述子8*32=256位</span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;8; i++, pa++, pb++)</span><br><span class="line">    {</span><br><span class="line">        unsigned  int v = *pa ^ *pb;    //异或操作，相等为0，不等为1     </span><br><span class="line">        v = v - ((v &gt;&gt; 1) &amp; 0x55555555);</span><br><span class="line">        v = (v &amp; 0x33333333) + ((v &gt;&gt; 2) &amp; 0x33333333);</span><br><span class="line">        dist += (((v + (v &gt;&gt; 4)) &amp; 0xF0F0F0F) * 0x1010101) &gt;&gt; 24;</span><br><span class="line">    }</span><br></pre></td></tr></table></figure>
<p>对这段代码进行解读，这段代码实际上使用了一个泛用的算法，叫SWAR算法，用于计算二进制数中1的个数。整体思路就是先将相邻2位的1的数量计算出来，结果存放在这2位。然后将相邻4位的结果相加，结果存放在这4位，将相邻8位的结果相加，结果存放在这8位。最后计算整体1的数量，记录在高8位，然后通过右移运算，将结果放到低8位，得到最终结果。</p>
<p>SWAR算法通过先将数字进行最细力粒度的拆分，然后每一步都对上一次的计算结果进行整合，最终得到整体结果。由于这里处理的是32位数，所以这个算法比遍历算法快32倍，也不需要消耗额外内存空间。</p>
<h3 id="地图点平均观测方向观测距离范围">地图点平均观测方向、观测距离范围</h3>
<figure>
<img src="/2022/05/13/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9C%B0%E5%9B%BE%E7%82%B9%E3%80%81%E5%85%B3%E9%94%AE%E5%B8%A7%E5%92%8C%E5%9B%BE%E7%BB%93%E6%9E%84/地图点朝向.png" alt="地图点法线朝向的计算"><figcaption aria-hidden="true">地图点法线朝向的计算</figcaption>
</figure>
<p>对于观测到某一地图点的全部关键帧，对该点的观测方向归一化为单位向量，然后进行求和得到该地图点的朝向。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void MapPoint::UpdateNormalAndDepth()</span><br><span class="line">{</span><br><span class="line">    // Step 1 获得观测到该地图点的所有关键帧、坐标等信息</span><br><span class="line">    map&lt;KeyFrame*,size_t&gt; observations;</span><br><span class="line">    KeyFrame* pRefKF;</span><br><span class="line">    cv::Mat Pos;</span><br><span class="line">    {</span><br><span class="line">        unique_lock&lt;mutex&gt; lock1(mMutexFeatures);</span><br><span class="line">        unique_lock&lt;mutex&gt; lock2(mMutexPos);</span><br><span class="line">        if(mbBad)</span><br><span class="line">            return;</span><br><span class="line"></span><br><span class="line">        observations=mObservations; // 获得观测到该地图点的所有关键帧</span><br><span class="line">        pRefKF=mpRefKF;             // 观测到该点的参考关键帧（第一次创建时的关键帧）</span><br><span class="line">        Pos = mWorldPos.clone();    // 地图点在世界坐标系中的位置</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    if(observations.empty())</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    // Step 2 计算该地图点的平均观测方向</span><br><span class="line">    // 能观测到该地图点的所有关键帧，对该点的观测方向归一化为单位向量，然后进行求和得到该地图点的朝向</span><br><span class="line">    // 初始值为0向量，累加为归一化向量，最后除以总数n</span><br><span class="line">    cv::Mat normal = cv::Mat::zeros(3,1,CV_32F);</span><br><span class="line">    int n=0;</span><br><span class="line">    for(map&lt;KeyFrame*,size_t&gt;::iterator mit=observations.begin(), mend=observations.end(); mit!=mend; mit++)</span><br><span class="line">    {</span><br><span class="line">        KeyFrame* pKF = mit-&gt;first;</span><br><span class="line">        cv::Mat Owi = pKF-&gt;GetCameraCenter();</span><br><span class="line">        // 获得地图点和观测到它关键帧的向量并归一化</span><br><span class="line">        cv::Mat normali = mWorldPos - Owi;</span><br><span class="line">        normal = normal + normali/cv::norm(normali);                       </span><br><span class="line">        n++;</span><br><span class="line">    } </span><br><span class="line"></span><br><span class="line">    cv::Mat PC = Pos - pRefKF-&gt;GetCameraCenter();                           // 参考关键帧相机指向地图点的向量（在世界坐标系下的表示）</span><br><span class="line">    const float dist = cv::norm(PC);                                        // 该点到参考关键帧相机的距离</span><br><span class="line">    const int level = pRefKF-&gt;mvKeysUn[observations[pRefKF]].octave;        // 观测到该地图点的当前帧的特征点在金字塔的第几层</span><br><span class="line">    const float levelScaleFactor =  pRefKF-&gt;mvScaleFactors[level];          // 当前金字塔层对应的尺度因子，scale^n，scale=1.2，n为层数</span><br><span class="line">    const int nLevels = pRefKF-&gt;mnScaleLevels;                              // 金字塔总层数，默认为8</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line">        unique_lock&lt;mutex&gt; lock3(mMutexPos);</span><br><span class="line">        // 使用方法见PredictScale函数前的注释</span><br><span class="line">        mfMaxDistance = dist*levelScaleFactor;                              // 观测到该点的距离上限</span><br><span class="line">        mfMinDistance = mfMaxDistance/pRefKF-&gt;mvScaleFactors[nLevels-1];    // 观测到该点的距离下限</span><br><span class="line">        mNormalVector = normal/n;                                           // 获得地图点平均的观测方向</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="关键帧">关键帧</h2>
<p>关键帧就是几帧图像里面比较有代表性的那一帧，可以大概的把它的重要程度比作一幅图像中的特征点。</p>
<figure>
<img src="/2022/05/13/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9C%B0%E5%9B%BE%E7%82%B9%E3%80%81%E5%85%B3%E9%94%AE%E5%B8%A7%E5%92%8C%E5%9B%BE%E7%BB%93%E6%9E%84/关键帧.png" alt="ORB-SLAM中的关键帧"><figcaption aria-hidden="true">ORB-SLAM中的关键帧</figcaption>
</figure>
<h3 id="关键帧的好处">关键帧的好处</h3>
<ul>
<li>相邻帧之间的信息冗余度很高，通过关键帧可以降低信息冗余度。比如相机放在原地不动，普通帧一直在累加，但是关键帧始终不变；</li>
<li>关键帧是普通帧滤波和优化的结果，可以增加定位的准确性；</li>
<li>关键帧的主要作用是面向后端的算力和精度的折中，使得有限的资源能够用在刀刃上。就好像现在还处于社会主义初级阶段，不能够使所有人都富起来，只好让一部分人先富起来，先富带动后富，最后等生产力极大发展（算力爆炸）后，才能实现所有人一视同仁。</li>
</ul>
<h3 id="如何选择关键帧">如何选择关键帧</h3>
<p>目前来说，主要的指标主要有下面这些：</p>
<ul>
<li>时间尺度，距离上一关键帧之间的帧数不能太少，但是搁多少帧选择关键帧是个问题；</li>
<li>运动尺度，计算运动累积的多少，每移动一定的距离就选一个关键帧，但是这样的话如果对着一个物体来回扫就会出现大量相同关键帧；</li>
<li>根据共视特征点的数量，记录下当前视角下的特征点的数量或者比例，当相机离开场景时才新建关键帧，缺点是数据结构和逻辑比较复杂。</li>
</ul>
<p>在ORB-SLAM2中，后期的局部建图和全局BA都是只用关键帧来操作了，在跟踪线程中选择关键帧，这时候的选择标准还比较宽松，在局部建图线程，会根据共视冗余度对关键帧进行剔除，剩下这些才是真正用到的关键帧。</p>
<h2 id="共视图">共视图</h2>
<p>共视图是无向加权图，每个节点都是关键帧，如果关键帧之间满足一定的共视关系（在ORB-SLAM2中的标准是至少有15个共视地图点），就连成一条边，这条边的权重就是共视地图点的数目。</p>
<figure>
<img src="/2022/05/13/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9C%B0%E5%9B%BE%E7%82%B9%E3%80%81%E5%85%B3%E9%94%AE%E5%B8%A7%E5%92%8C%E5%9B%BE%E7%BB%93%E6%9E%84/共视图.png" alt="共视图"><figcaption aria-hidden="true">共视图</figcaption>
</figure>
<h3 id="共视图的作用">共视图的作用</h3>
<ul>
<li>跟踪局部地图，扩大搜索范围；</li>
<li>关键帧之间新建地图点；</li>
<li>闭环检测以及重定位检测；</li>
<li>优化。</li>
</ul>
<h2 id="本质图">本质图</h2>
<p>共视图比较稠密，本质图比共视图稀疏很多，关键帧作为节点，但是连接边更少，只保留了联系紧密的边。在本质图中，主要包含了</p>
<ul>
<li>生成树之间的连接关系；</li>
<li>形成闭环的连接关系；</li>
<li>共视关系非常好的连接关系。</li>
</ul>
<figure>
<img src="/2022/05/13/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9C%B0%E5%9B%BE%E7%82%B9%E3%80%81%E5%85%B3%E9%94%AE%E5%B8%A7%E5%92%8C%E5%9B%BE%E7%BB%93%E6%9E%84/本质图.png" alt="本质图"><figcaption aria-hidden="true">本质图</figcaption>
</figure>
<h2 id="生成树">生成树</h2>
<p>生成树由子关键帧和父关键帧构成，也就是共视关系最高的帧，只要子关键帧存在父关键帧就生成连接关系，不然就被孤立，如下图中黄色的线。</p>
<figure>
<img src="/2022/05/13/ORB-SLAM%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9C%B0%E5%9B%BE%E7%82%B9%E3%80%81%E5%85%B3%E9%94%AE%E5%B8%A7%E5%92%8C%E5%9B%BE%E7%BB%93%E6%9E%84/生成树.png" alt="生成树"><figcaption aria-hidden="true">生成树</figcaption>
</figure>
]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>SLAM</tag>
      </tags>
  </entry>
</search>
