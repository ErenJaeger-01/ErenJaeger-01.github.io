<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KxZhang&#39;s Blog</title>
  
  <subtitle>Like a giddy planet beside a burning star.</subtitle>
  <link href="https://erenjaeger-01.github.io/atom.xml" rel="self"/>
  
  <link href="https://erenjaeger-01.github.io/"/>
  <updated>2022-05-05T03:57:07.304Z</updated>
  <id>https://erenjaeger-01.github.io/</id>
  
  <author>
    <name>张凯翔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>五一假期产生的一些感想</title>
    <link href="https://erenjaeger-01.github.io/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"/>
    <id>https://erenjaeger-01.github.io/2022/05/04/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</id>
    <published>2022-05-04T08:43:01.000Z</published>
    <updated>2022-05-05T03:57:07.304Z</updated>
    
    <content type="html"><![CDATA[<p>北京的疫情又严重起来了，五一假期全都在实验室里坐着，每天除了不上课和平时基本没什么区别。最近在学习SLAM，想把学习过程中的一些想法记录下来，又不想拘泥于以前的做法，于是搭建了这个博客网站。不得不说框架真的是很方便，对于我这种对前端一无所知的人来说也能很快的搭好一个看上去还不错（个人感觉）的网站。</p><p>时常觉得自己还挺幸运的，因为对自己的专业，也就是自动化并不讨厌，甚至还挺喜欢，这样起码在学习的过程中不会觉得特别痛苦。大一入学的时候接触到了一些科创活动，碰到了一些很强的人，之后就顺理成章的一路走下来了。从大一寒假决定转专业到自动化，再到之后参加的各种比赛，大四考研，最后到现在的研究生，每一步好像都没有什么犹豫。本科在实验室的日子也是我在南航少数几段有声有色的时光。</p><p>本科做了三年的RoboMaster，这是大疆举办的一个全国性的机器人比赛，大一第一次见到这比赛的时候惊为天人，一瞬间就知道了自己想做的就是这玩意。</p><p><img src="/./%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/3.jpg" alt="RoboMaster"></p><p>没有半点犹豫，我大一就进去拧了几个月螺丝，同时看看学长是怎么做的，说实话，那段激情燃烧的岁月还是挺值得留恋的，年轻人精力旺盛，一下子熬个几天夜不成问题，半夜的时候七八个人点个夜宵（那时候外卖还是可以直接送到楼下的），拿麦克纳姆轮搭成的半成品车架子当餐桌，凌晨三四点走在回宿舍的路上，校园里静悄悄的，连走路的脚步声都听的很清晰。</p><p><img src="/./%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/1.jpg" alt="大一实验室的工作台"></p><p><img src="/./%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/2.jpg" alt="半夜实验室夜宵"></p><p>暑假的时候队伍选拔新队员，我整个暑假大部分时间都在学校，只有中间回去了几天，小小缅怀了一下高中母校。当时选拔的题目是做一个倒立摆，那个时候我开始正式的学习STM32单片机，然后发现自己真的是很菜，调个PID都要调好久，遑论之前的底层驱动配置了。暑假的最后二十天整个人进入到一种很纯粹的状态，除了吃饭睡觉洗澡其他时间全在实验室里，终于在验收前几天实现了全部功能。验收的时候我惊讶的发现同时参加选拔的人有三分之二没做出来或者放弃选拔了，其中不乏之前看起来很强的大佬，因为他们高中就接触过类似的东西，而我的高中除了做题打游戏其他的啥也没有。</p><p><img src="/./%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/4.jpg" alt="倒立摆"></p><p>做倒立摆的经历算是让我对电控真正的入了个门，同时也意识到做技术好像没有想象中的那么难，电脑也不全是用来打游戏的（误）。</p><p>新学期，我逐渐热衷于参加各种电子设计比赛，当时有一种冲动，想要通过做这些比赛来证明自己，现在看来做比赛有利有弊，好处是确实可以让你在比较短的时间内学到很多东西，坏处是很多东西并没有完全搞懂，浮于表面，毕竟做比赛拿来用，能解决问题就完事了。这个想法给我后面埋了很多坑，最突出的就是大四下学期出去实习画的板子前两版不能用。</p><p>大二一开始参加了校电赛，当时做了一个灯光遥控装置，刚一进去就拿了一等奖，这个比赛让我的自信心再一次爆炸，学习的欲望也随之更加旺盛。</p><p><img src="/./%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/5.jpg" alt="校电赛"></p><p>因为这些比赛，我的大一和大二开始这段时间可谓是顺风顺水，大一学科成绩也在前10%，还有本硕连读资格，好像保研只是水到渠成的事情。当然，人生总是充满了戏剧性，校电赛结束后，我得了肺结核。</p><p>这场病直接毁了之前的一切。我在医院住了一个月，休学了两个月，大二上学期的课程上了一半全部退掉不让考试，堆叠到之后的学期。当医生和我说要住院一个月时我哭的梨花带雨，因为我担心这样会失去保研资格，现在想想当时的想法还挺好笑的。</p><p>大二下学期重新回到学校，课程负担已经因为转专业和休学，同时我又拒绝留级而增加到了一个恐怖的高度，我意识到我无论如何也不可能掌握全部的课程，同时还要做RoboMaster比赛，花一个暑假入的队不能就这么退了，所以我只认真学了在我看来有用的课，比如数电模电，比如信号与线性系统，比如计算机软硬件基础，毛概之类的课能不上就不上，这样整个学期的节奏就还在一个可以接受的范围内。最终我的综合成绩很差，顺理成章的失去了保研资格，但是我认真学了的几门课成绩都还可以，我觉得想要的知识学到就够了。</p><p>大二的RoboMaster我负责了一台步兵机器人的电控，这个比赛也是大二下学期做的，这一年的机器人都做得非常好，平时测试各种移动，自瞄都很稳，但是最后比赛的时候超级电容出了问题，这是整个队伍都疏忽的一点，挺可惜，但是也没有办法，只能认了。</p><p><img src="/./%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/9.jpg" alt="步兵机器人"></p><p><img src="/./%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/10.jpg" alt="战队合影"></p><p>可能生病只是一个开始，回来后我做的所有事情好像没有一件是成功的。大二暑假全国电赛寄了，本来想靠这个说不定能保研，大三做智能车也寄了，本来想靠这个说不定也能保研。每次校内赛选拔成绩都很好，比如校电赛和智能车的校内赛，智能车校内赛还拿了特等奖，最终比赛都因为莫名其妙的原因出了岔子。智能车另一个组的人拿了我校赛的代码，最后拿了国三。就这样磕磕绊绊过完了整个大三，八月份的时候决定考研。</p><p><img src="/./%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/11.jpg" alt="智能车"></p><p>考研那段时间仿佛又找回了从前当小镇做题家的日子，本科做的最后一件算是大一点的事没有出岔子，我如愿以偿来到了北航，然后意识到以前做的东西实验室基本上都不做（大悲），不过学新东西的感觉很好，未来的路也算是明了，起码自己想做什么方向还是有数的，这个程度我已经觉得算是满意了。</p><p>假期最后一天的晚上胡思乱想，翻来覆去睡不着，眼睛瞪得跟铜铃一样，脑子里就在回想这些东西。如果我因为从前的无法无天，不思进取要受到惩罚的话，那么我本科已经为此付出了相应的代价。研究生三年说不定就是学生生涯的结束了，希望这三年（只剩下两年多一点了）能够成长到想要的高度。</p><p>继续加油。</p>]]></content>
    
    
    <summary type="html">放假放了个寂寞。</summary>
    
    
    
    <category term="杂记" scheme="https://erenjaeger-01.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机视觉系列（一）：图像金字塔</title>
    <link href="https://erenjaeger-01.github.io/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94/"/>
    <id>https://erenjaeger-01.github.io/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94/</id>
    <published>2022-05-01T10:11:28.000Z</published>
    <updated>2022-05-04T08:37:16.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h2><p>一幅图像的金字塔是一系列以金字塔形状排列，分辨率逐渐降低且源于同一张原始图的图像集合。金字塔的底部是待处理图像的高分辨率表示，而顶部是低分辨率的近似。层级越高，图像越小，分辨率越低。图像金字塔是图像中多尺度表达的一种，最初用于机器视觉和图像压缩，最主要功能用于图像分割，是一种以多分辨率来解释图像的有效但概念简单的结构。</p><p><img src="/./%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94/1.jpg" alt="pyramid"></p><p>生成图像金字塔主要有两种方式： <strong>向下采样</strong>和<strong>向上采样</strong>。</p><ul><li>向下采样：将图像从最底层（即上图中的level0）转换为level1、level2…的过程，图像分辨率不断降低。</li><li>向上采样：将图像从最顶层（即上图中的level4）转换为level3、level2…的过程，图像分辨率不断增大。</li></ul><p>常见的金字塔一般有两类：</p><ul><li><strong>高斯金字塔</strong>: 用来向下&#x2F;降采样，主要的图像金字塔；</li><li><strong>拉普拉斯金字塔</strong>: 用来从金字塔低层图像重建上层未采样图像，在数字图像处理中也即是预测残差，可以对图像进行最大程度的还原，配合高斯金字塔一起使用。</li></ul><p>在OpenCv中提供了对图像进行上下采样的接口：**pyrUp()<strong>和</strong>pyrDown()<strong>，同时提供了一个对图像进行尺度变换的函数</strong>resize()**。</p><p>获取金字塔一般来说包括两个步骤：</p><ul><li>对于向下采样，首先对图像进行高斯平滑，然后进行降采样（将图像尺寸行和列方向缩减一半）；</li><li>对于向上采样，首先对图像进行升采样（将图像尺寸行和列方向增大一倍），然后进行高斯平滑；</li></ul>]]></content>
    
    
    <summary type="html">我们可以很轻松的辨认出远处和近处的同一个事物，然而这对计算机来说并不简单。</summary>
    
    
    
    <category term="Computer Version" scheme="https://erenjaeger-01.github.io/categories/Computer-Version/"/>
    
    
    <category term="Computer Version" scheme="https://erenjaeger-01.github.io/tags/Computer-Version/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉系列（二）：图像梯度</title>
    <link href="https://erenjaeger-01.github.io/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E6%A2%AF%E5%BA%A6/"/>
    <id>https://erenjaeger-01.github.io/2022/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E6%A2%AF%E5%BA%A6/</id>
    <published>2022-05-01T03:16:01.000Z</published>
    <updated>2022-05-04T03:28:02.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像梯度的概念"><a href="#图像梯度的概念" class="headerlink" title="图像梯度的概念"></a>图像梯度的概念</h2><p>图像梯度是指图像某像素在x和y两个方向上的变化率（与相邻像素比较），是一个二维向量，由2个分量组成X轴的变化、Y轴的变化。其中：</p><ul><li>X轴的变化是指当前像素右侧（X加1）的像素值减去当前像素左侧（X减1）的像素值；</li><li>Y轴的变化是当前像素下方（Y加1）的像素值减去当前像素上方（Y减1）的像素值；<br>计算出来这两个分量，会形成一个二维向量，该向量描述了当前像素点的梯度。对这个向量取反正切函数 <em><strong>arctan</strong></em> ，可以得到梯度的角度。</li></ul><h2 id="图像梯度的求解"><a href="#图像梯度的求解" class="headerlink" title="图像梯度的求解"></a>图像梯度的求解</h2><p>图像梯度的求解过程可以用一个卷积核来实现：[-1,0,1]。</p><p>$\nabla{f(x,y)}&#x3D;$ $\left [ \begin{matrix} g_x\g_y \end{matrix} \right]&#x3D;$ $\left [ \begin{matrix} \frac{\partial f}{\partial x}\ \frac{\partial f}{\partial y} \end{matrix} \right]&#x3D;$ $\left [ \begin{matrix} f(x+1,y)-f(x-1,y)\f(x,y+1)-f(x,y-1) \end{matrix} \right]$</p><p><img src="/./imgGradient/2.png" alt="gradient"></p><p>$\nabla{f(x,y)}&#x3D;$ $\left [ \begin{matrix} f(x+1,y)-f(x-1,y)\f(x,y+1)-f(x,y-1) \end{matrix} \right]&#x3D;$ $\left [ \begin{matrix} 55-105\90-40 \end{matrix} \right]&#x3D;$ $\left [ \begin{matrix} -50\ 50 \end{matrix} \right]$</p><p>图像梯度的绝对值为：</p><p>$\sqrt{50^2+(-50)^2}&#x3D;70.7107$</p><p>图像梯度的角度为：</p><p>$\arctan(-50&#x2F;50)&#x3D;-45^\circ$</p>]]></content>
    
    
    <summary type="html">又是这玩意儿。</summary>
    
    
    
    <category term="Computer Version" scheme="https://erenjaeger-01.github.io/categories/Computer-Version/"/>
    
    
    <category term="Computer Version" scheme="https://erenjaeger-01.github.io/tags/Computer-Version/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV中用到的一些函数说明</title>
    <link href="https://erenjaeger-01.github.io/2022/05/01/OpenCV%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E/"/>
    <id>https://erenjaeger-01.github.io/2022/05/01/OpenCV%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E/</id>
    <published>2022-05-01T00:46:38.000Z</published>
    <updated>2022-05-04T08:46:04.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取整函数"><a href="#取整函数" class="headerlink" title="取整函数"></a>取整函数</h2><p>cvRound()、cvFloor()、cvCeil()函数</p><ul><li>cvRound(): 返回参数最接近的整数值，四舍五入；</li><li>cvFloor(): 返回不大于参数的最大整数值，即向下取整；</li><li>cvCeil(): 返回不小于参数的最小整数值，即向上取整；</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;opencv2/opencv.hpp&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace cv;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;cvRound(2.5) : &quot; &lt;&lt; cvRound(2.5) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;cvFloor(2.5) : &quot; &lt;&lt; cvFloor(2.5) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;cvCeil(2.5)  : &quot; &lt;&lt; cvCeil(2.5)  &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; &quot;cvRound(2.5) : &quot; &lt;&lt; cvRound(2.5) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;cvFloor(2.5) : &quot; &lt;&lt; cvFloor(2.5) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;cvCeil(2.5)  : &quot; &lt;&lt; cvCeil(2.5)  &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    waitKey(0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="/./OpenCV%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E/1.png" alt="opencv"></p>]]></content>
    
    
    <summary type="html">OpenCV中用到的一些函数功能说明。</summary>
    
    
    
    <category term="OpenCV" scheme="https://erenjaeger-01.github.io/categories/OpenCV/"/>
    
    
    <category term="OpenCV" scheme="https://erenjaeger-01.github.io/tags/OpenCV/"/>
    
  </entry>
  
</feed>
